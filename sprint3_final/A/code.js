// https://contest.yandex.ru/contest/23815/run-report/140994270/

/*
 * Функция brokenSearch реализует модифицированный бинарный поиск для частично отсортированного массива.
 *
 * -- ПРИНЦИП РАБОТЫ --
 * 1. Определяем границы поиска (left, right) и средний элемент (mid)
 * 2. Если средний элемент равен искомому - возвращаем его индекс
 * 3. Проверяем, какая половина массива (левая или правая) отсортирована правильно:
 *    - Если левая часть отсортирована и target в её диапазоне - ищем в левой части
 *    - Иначе ищем в правой части
 *    - Аналогично для случая, когда правая часть отсортирована
 *
 * -- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
 * Алгоритм корректен, потому что:
 * 1. В частично отсортированном массиве хотя бы одна половина всегда правильно отсортирована
 * 2. Проверяя отсортированную половину, можно точно определить наличие target в ней
 * 3. Рекурсивное применение к неотсортированной половине гарантирует нахождение элемента
 *
 * -- ВРЕМЕННАЯ СЛОЖНОСТЬ --
 * O(log n) - на каждой итерации размер задачи уменьшается вдвое.
 *
 * -- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
 * O(1) - используется только фиксированное количество переменных.
 */
function brokenSearch(nums, target) {
    // Your code
    let left = 0;
    let right = nums.length - 1;

    while (left <= right) {
        const mid = Math.floor((left + right) / 2);

        if (nums[mid] === target) {
            return mid;
        }

        if (nums[left] <= nums[mid]) {
            if (nums[left] <= target && target < nums[mid]) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        } else {
            if (nums[mid] < target && target <= nums[right]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
    }

    return -1;
	// “ヽ(´▽｀)ノ”
}

function test() {
    const arr = [19, 21, 100, 101, 1, 4, 5, 7, 12];
    if (brokenSearch(arr, 5) !== 6)  {
        console.error("WA");
    }

    // console.log(brokenSearch(arr, 5))
}